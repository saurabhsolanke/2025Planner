<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
    calendar </title>
  <link href="/styles.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    function toggleTaskForm() {
      const taskFormContainer = document.getElementById('taskFormContainer');
      const alternateContainer = document.getElementById('alternateContainer'); // New div reference
      if (taskFormContainer.style.display === 'none') {
        taskFormContainer.style.display = 'block';
        alternateContainer.style.display = 'none'; // Hide alternate div
      } else {
        taskFormContainer.style.display = 'none';
        alternateContainer.style.display = 'block'; // Show alternate div
      }
      const now = new Date();
      const options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false };
      const formattedTimestamp = now.toLocaleString('en-US', options); // Returns a formatted string

      // Display the timestamp in the div
      document.getElementById('timestampDisplay').innerHTML = formattedTimestamp;
    }

  </script>
</head>

<body>

  <div
    class="flex w-full flex-col justify-between rounded-lg bg-white px-6 py-5 shadow-lg dark:bg-zinc-900 dark:shadow-black/5 lg:flex-row lg:items-center">
    <!-- logo -->
    <div class="flex items-center">
      <div class="flex h-10 w-10 items-center text-lg font-bold text-gray-700 dark:text-zinc-500">
        <!-- <img class="h-full w-full"
        src="https://res.cloudinary.com/pranav1421/image/upload/v1652785994/Tailwind-Component-library/Logo/tailwind-css_yizuxw.svg"
        alt="" /> -->
        <span class="px-2"> <a href="/">keepUp</a> </span>
      </div>
      <div class="flex w-full justify-end">
        <a class="block lg:hidden">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700 dark:text-zinc-700" fill="none"
            viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </a>
      </div>
    </div>
    <!-- nav items -->
    <div class="">
      <div class="" id="navigation">
        <ul class="mt-2 flex flex-col gap-2 font-medium text-gray-700 dark:text-zinc-400 lg:mt-0 lg:flex-row lg:gap-4">
          <li><a href="/calendar" class="text-sky-700">Diary</a></li>
          <li><a href="/notes" class="hover:text-sky-700">Notes</a></li>
        </ul>
      </div>
    </div>
  </div>

  <div class="bg-gray-100 p-6">
    <div class="container mx-auto">
      <h1 class="text-4xl font-bold mb-6 text-center">Diary - 2025</h1>

      <div class="mb-4">
        <button onclick="toggleTaskForm()" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
          Calendar
        </button>
      </div>

      <div id="taskFormContainer" class="container mb-6" style="display: none;"> <!-- Initially visible -->
        <!-- Add Task Form -->
        <form action="/calendar/add" method="POST" class="mb-6 bg-white p-4 rounded shadow">
          <div class="flex flex-col md:flex-row md:space-x-4">
            <input type="date" name="date1" required class="border border-gray-300 p-2 rounded w-full md:w-1/3">
            <input type="text" name="task" placeholder="Task Description" required
              class="border border-gray-300 p-2 rounded w-full md:w-2/3">
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Add </button>
          </div>
        </form>

        <!-- Calendar Table -->
        <div class="overflow-x-auto">
          <table class="min-w-full bg-white border border-gray-300 rounded-lg shadow-lg">
            <thead>
              <tr class="bg-gray-200 text-gray-700">
                <th class="py-3 px-4 border-b">Date</th>
                <th class="py-3 px-4 border-b">Tasks</th>
              </tr>
            </thead>
            <tbody>
              <% tasks.forEach(task=> { %>
                <tr class="hover:bg-gray-100">
                  <td class="py-3 px-4 border-b text-center">
                    <%= task.date.toDateString() %>
                      <!-- Delete All Button -->
                      <form action="/calendar/delete-all/<%= task.date %>" method="POST" class="inline">
                        <button type="submit" class="text-red-600 hover:underline ml-4"> <img
                            src="/assets/trash.svg" /></button>
                      </form>
                  </td>
                  <td class="py-3 px-4 border-b">
                    <ul class="list-disc list-inside">
                      <% task.tasks.forEach((t, index)=> { %>
                        <li class="flex justify-between items-center">
                          <span>
                            <%= t.description %> - <%= t.status %>
                          </span>
                          <div>
                            <button type="button" class="text-blue-600 hover:underline"
                              onclick="document.getElementById('edit-form-<%= task.date.toDateString() %>-<%= index %>').classList.toggle('hidden')">
                              <img src="/assets/pencil-square.svg" />
                            </button>
                            <form id="edit-form-<%= task.date.toDateString() %>-<%= index %>"
                              action="/calendar/edit/<%= task.date.toISOString() %>/<%= index %>" method="POST"
                              class="hidden">
                              <input type="text" name="description" value="<%= t.description %>"
                                class="border border-gray-300 p-1 rounded" required>
                              <select name="status" class="border border-gray-300 p-1 rounded">
                                <option value="Pending" <%=t.status==='Pending' ? 'selected' : '' %>>Pending</option>
                                <option value="Completed" <%=t.status==='Completed' ? 'selected' : '' %>>Completed
                                </option>
                              </select>
                              <button type="submit"
                                class="bg-green-600 text-white px-2 py-1 rounded hover:bg-green-700">Save</button>
                            </form>
                            <!-- Delete Button -->
                            <form action="/calendar/delete/<%= task.date.toISOString() %>/<%= index %>" method="POST"
                              class="inline">
                              <button type="submit" class="text-red-600 hover:underline">
                                <img src="/assets/trash.svg" />
                              </button>
                            </form>
                          </div>
                        </li>
                        <% }); %>
                    </ul>
                  </td>
                </tr>
                <% }); %>
            </tbody>
          </table>
        </div>
      </div>

      <div id="alternateContainer" class="container mb-6" style="display: block;">
        <div class="bg-gray-100 flex items-center justify-center">
          <div class="bg-white shadow-lg rounded-lg p-4 max-w-md w-full">
            <!-- Calendar Header -->
            <div class="flex justify-between items-center mb-4">
              <button id="prevMonth" class="text-gray-500 hover:text-gray-700">&lt;</button>
              <h1 id="currentMonth" class="text-xl font-bold text-gray-700"></h1>
              <button id="nextMonth" class="text-gray-500 hover:text-gray-700">&gt;</button>
            </div>

            <!-- Days of the Week -->
            <div class="grid grid-cols-7 text-center font-medium text-gray-600 mb-2">
              <div>Mon</div>
              <div>Tue</div>
              <div>Wed</div>
              <div>Thu</div>
              <div>Fri</div>
              <div>Sat</div>
              <div>Sun</div>
            </div>

            <!-- Calendar Grid -->
            <div id="calendarDays" class="grid grid-cols-7 grid-rows-5 gap-2 text-center">
              <!-- Days will be dynamically rendered here -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal Structure -->
    <div id="taskModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
      <div class="bg-white rounded-lg p-6 shadow-lg">
        <h2 class="text-xl font-bold mb-4">Add Task</h2>
        <form action="/calendar/add" method="POST" class="mb-6">
          <div class="flex flex-col md:flex-row md:space-x-4">
            <input type="date" name="date" value="<%= selectedDate %>" required
              class="border border-gray-300 p-2 rounded w-full md:w-1/3" readonly>
            <input type="text" name="task" placeholder="Task Description" required
              class="border border-gray-300 p-2 rounded w-full md:w-2/3">
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Add note</button>
          </div>
        </form>
        <div class="bg-slate-500" id="taskList"></div>

        <% tasks.forEach(task=> { %>

          <!-- <p class="bg-slate-600">
            <%= selectedDate %>*
          </p>
          <p class="bg-slate-500">
            <%= task.date.toISOString().split('T')[0] %>**
          </p>
          <p class="bg-slate-400">
            <%= task.date.toDateString().split('T')[0] %>***
          </p>
          <%= task.date.toDateString().split('T')[0] %> -->
          <% task.tasks.forEach((t, index)=> { %>
            <% if (task.date.toISOString().split('T')[0]===selectedDate) { %>
              <p class="bg-green-400">
                <!-- <%= task.date.toDateString() %> -->
              </p>
              <p class="bg-green-600">
                <%= t.description %>
              </p>
              <% } %>
                <% }); %>
                  <% }); %>
                    <button onclick="toggleModal()" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                      <a>Close</a> </button>
      </div>
    </div>
  </div>
  <script>
    function openModalWithDate(year, month, day) {
      const dateInput = document.querySelector('input[name="date"]');
      const formattedDate = new Date(year, month, day + 1).toISOString().split('T')[0]; // Format date as YYYY-MM-DD
      console.log("this is formatted daete", formattedDate);
      dateInput.value = formattedDate;
      // Add query parameter to the URL
      const currentUrl = new URL(window.location.href);
      currentUrl.searchParams.set('date', formattedDate); // Set the date query parameter
      window.history.pushState({}, '', currentUrl); // Update the URL without reloading

      // Call the API to get tasks for the selected date
      // fetch(`/calendar/?date=${formattedDate}`)
      //   .then(response => {
      //     // Check if the response is OK (status in the range 200-299)
      //     if (!response.ok) {
      //       throw new Error(`HTTP error! status: ${response.status}`);
      //     }
      //     // Check if the response is JSON
      //     const contentType = response.headers.get("content-type");
      //     if (!contentType || !contentType.includes("application/json")) {
      //       throw new Error("Received non-JSON response");
      //     }
      //     return response.json();
      //   })
      //   .then(data => {
      //     console.log('Data received from API:', data);
      //     updateModalContent(data);
      //   })
      //   .catch(error => {
      //     console.error('There was a problem with the fetch operation:', error);
      //   });

      toggleModal();
    }

    function updateModalContent(tasks) {
      const taskList = document.getElementById('taskList'); // Ensure this element exists
      if (!taskList) {
        console.error('Element with ID "taskList" not found.');
        return; // Exit if the element is not found
      }

      taskList.innerHTML = ''; // Clear previous tasks

      // Check if tasks is an array
      if (!Array.isArray(tasks)) {
        console.error('Expected tasks to be an array, but got:', tasks);
        taskList.innerHTML = '<p>Error: Invalid data received.</p>';
        return; // Exit if tasks is not an array
      }

      if (tasks.length === 0) {
        taskList.innerHTML = '<p>No tasks found for this date.</p>';
      } else {
        tasks.forEach(task => {
          const taskItem = document.createElement('div');
          taskItem.textContent = `${task.description} - ${task.status}`; // Adjust based on your task structure
          taskList.appendChild(taskItem);
        });
      }
    }

    function toggleModal() {
      const modal = document.getElementById('taskModal');
      modal.classList.toggle('hidden');
      // If the modal is being closed, remove the date parameter from the URL
      if (modal.classList.contains('hidden')) {
        const currentUrl = new URL(window.location.href);
        currentUrl.searchParams.delete('date'); // Remove the 'date' parameter
        window.history.pushState({}, '', currentUrl);
      }
      // location.reload();
    }
    const calendarDays = document.getElementById('calendarDays');
    const currentMonth = document.getElementById('currentMonth');
    const prevMonth = document.getElementById('prevMonth');
    const nextMonth = document.getElementById('nextMonth');

    let date = new Date();

    function renderCalendar() {
      // Get current year and month
      const year = date.getFullYear();
      const month = date.getMonth();

      // Set the current month and year in the header
      currentMonth.textContent = new Date(year, month).toLocaleString('default', {
        month: 'long',
        year: 'numeric'
      });

      // Clear previous calendar days
      calendarDays.innerHTML = '';

      // Get the first day of the month and the total days in the month
      const firstDay = new Date(year, month, 1).getDay(); // Day of week (0-6, Sun=0)
      const totalDays = new Date(year, month + 1, 0).getDate(); // Last day of the month

      // Adjust firstDay to make Monday the start of the week
      const adjustedFirstDay = (firstDay === 0 ? 6 : firstDay - 1);

      // Get today's date
      const today = new Date();
      const isCurrentMonth = today.getFullYear() === year && today.getMonth() === month;

      // Add blank days for the first row before the 1st of the month
      for (let i = 0; i < adjustedFirstDay; i++) {
        calendarDays.innerHTML += `<div></div>`;
      }

      // Inside your renderCalendar function, where you generate the calendar days
      for (let day = 1; day <= totalDays; day++) {
        // Check if this day is today
        const isToday = isCurrentMonth && today.getDate() === day;
        calendarDays.innerHTML += `
    <div class="py-2 rounded ${isToday ? 'bg-blue-500 text-white font-bold' : 'bg-gray-100 hover:bg-blue-200 cursor-pointer'}" 
         onclick="openModalWithDate(${year}, ${month}, ${day})">
      ${day}
    </div>`;
      }
      // Add blank days at the end to fill the 7x5 grid
      const totalCells = adjustedFirstDay + totalDays;
      const remainingCells = 7 * 5 - totalCells; // Total cells in a 7x5 grid is 35
      for (let i = 0; i < remainingCells; i++) {
        calendarDays.innerHTML += `<div></div>`;
      }
    }
    // Event listeners for navigation buttons
    prevMonth.addEventListener('click', () => {
      date.setMonth(date.getMonth() - 1);
      renderCalendar();
    });
    nextMonth.addEventListener('click', () => {
      date.setMonth(date.getMonth() + 1);
      renderCalendar();
    });
    // Initial render
    renderCalendar();
  </script>
</body>

</html>